#!/usr/bin/python

import os
import glob

import dbus
import gobject
import gtk
import appindicator


class GuiBuilder(object):
    def __init__(self, path):
        file_path = os.path.join(path)

        self.builder = gtk.Builder()
        self.builder.set_translation_domain('ubuntu-tweak')
        self.builder.add_from_file(file_path)
        self.builder.connect_signals(self)

        for o in self.builder.get_objects():
            if issubclass(type(o), gtk.Buildable):
                name = gtk.Buildable.get_name(o)
                setattr(self, name, o)
            else:
                print("WARNING: can not set name for non Buildable object: %s" % o)

    def get_object(self, name):
        return self.builder.get_object(name)


class LogWindow(gtk.Window, GuiBuilder):
    def __init__(self):
        gtk.Window.__init__(self)
        GuiBuilder.__init__(self, 'data/vpn-indicator.ui')

        self.set_size_request(480, 320)
        self.set_title('VPN Indicator')

        self.hpaned1.reparent(self)

        self._update_model()

    def _update_model(self):
        configs = glob.glob('/etc/openvpn/*.ovpn')
        configs.sort()

        for f in configs:
            self.config_model.append((f, os.path.splitext(os.path.basename(f))[0]))


class VpnIndicator(appindicator.Indicator):
    INTERFACE = "me.imtx.vpndaemon"

    def __init__(self):
        appindicator.Indicator.__init__(self,
                                        "vpn-indicator",
                                        "changes-allow-symbolic",
                                        appindicator.CATEGORY_APPLICATION_STATUS)
        self.set_status(appindicator.STATUS_ACTIVE)
        self.set_attention_icon("indicator-messages-new")

        self._init_daemon()
        self._create_menu()
        self._init_status()

    def _init_status(self):
        if 'is running' in os.popen('service openvpn status').read():
            self.set_icon('nm-vpn-standalone-lock')
        else:
            self.set_icon("changes-allow-symbolic")

    def _create_menu(self):
        menu = gtk.Menu()

        first_item = None
        configs = glob.glob('/etc/openvpn/*.ovpn')
        configs.sort()

        for f in configs:
            menu_items = gtk.RadioMenuItem(first_item,
                                           os.path.splitext(os.path.basename(f))[0])
            
            if first_item == None:
                first_item = menu_items

            if os.path.realpath('/etc/openvpn/openvpn.conf') == f:
                menu_items.set_active(True)

            menu.append(menu_items)

            menu_items.connect("activate", self.on_vpnmenu_activated, f)

        menu.append(gtk.SeparatorMenuItem())

        log_menu = gtk.MenuItem('Status...')
        log_menu.connect('activate', self.on_log_menu_activated)
        menu.append(log_menu)

        quit_menu = gtk.MenuItem('Quit')
        quit_menu.connect('activate', self.on_quit_menu_activated)
        menu.append(quit_menu)

        menu.show_all()
        self.set_menu(menu)

    def on_log_menu_activated(self, widget):
        print 'show log'
        window = LogWindow()
        window.show_all()

    def on_quit_menu_activated(self, widget):
        gtk.main_quit()

    def on_vpnmenu_activated(self, widget, buf):
        self.daemon.load_config(buf, dbus_interface='me.imtx.vpndaemon')
#        self.daemon.connect_vpn(buf, dbus_interface='me.imtx.vpndaemon')

    def _init_daemon(self):
        try:
            systembus = dbus.SystemBus()
            self.daemon = systembus.get_object('me.imtx.vpndaemon', '/Daemon')
        except Exception, e:
            print e
            self.daemon = None

if __name__ == "__main__":
    VpnIndicator()
    gtk.main()
